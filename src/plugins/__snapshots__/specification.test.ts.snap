// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getSpecificationPlugin request validation options: segmentOrder (custom) validates body before query 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_enum_value",
    "options": [
      "plastic",
      "rubber",
      "wood"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid enum value. Expected 'plastic' | 'rubber' | 'wood', received 'paper'"
  }
]",
    "segment": "body",
  },
}
`;

exports[`getSpecificationPlugin request validation options: segmentOrder (custom) validates body before query 2`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "undefined",
    "path": [
      "count"
    ],
    "message": "Required"
  }
]",
    "segment": "query",
  },
}
`;

exports[`getSpecificationPlugin request validation options: segmentOrder (default) validates query before body 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "undefined",
    "path": [
      "count"
    ],
    "message": "Required"
  }
]",
    "segment": "query",
  },
}
`;

exports[`getSpecificationPlugin request validation options: segmentOrder (default) validates query before body 2`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_enum_value",
    "options": [
      "plastic",
      "rubber",
      "wood"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid enum value. Expected 'plastic' | 'rubber' | 'wood', received 'paper'"
  }
]",
    "segment": "body",
  },
}
`;

exports[`getSpecificationPlugin request validation segment validation validates body 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_enum_value",
    "options": [
      "plastic",
      "rubber",
      "wood"
    ],
    "path": [
      "type"
    ],
    "message": "Invalid enum value. Expected 'plastic' | 'rubber' | 'wood', received 'paper'"
  }
]",
    "segment": "body",
  },
}
`;

exports[`getSpecificationPlugin request validation segment validation validates headers 1`] = `
{
  "error": {
    "message": "[
  {
    "validation": "regex",
    "code": "invalid_string",
    "message": "Invalid",
    "path": [
      "authorization"
    ]
  }
]",
    "segment": "headers",
  },
}
`;

exports[`getSpecificationPlugin request validation segment validation validates params 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [
      "id"
    ],
    "message": "Expected number, received string"
  }
]",
    "segment": "params",
  },
}
`;

exports[`getSpecificationPlugin request validation segment validation validates query 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "undefined",
    "path": [
      "count"
    ],
    "message": "Required"
  }
]",
    "segment": "query",
  },
}
`;

exports[`getSpecificationPlugin request validation segment validation validates query 2`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [
      "count"
    ],
    "message": "Expected number, received string"
  }
]",
    "segment": "query",
  },
}
`;

exports[`getSpecificationPlugin response validation segment validation validates body 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [
      "pong"
    ],
    "message": "Expected number, received string"
  }
]",
    "segment": "body",
  },
}
`;

exports[`getSpecificationPlugin response validation segment validation validates headers 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "undefined",
    "path": [
      "x-count"
    ],
    "message": "Required"
  }
]",
    "segment": "headers",
  },
}
`;

exports[`getSpecificationPlugin response validation segment validation works for res.send inside callback 1`] = `
{
  "error": {
    "message": "[
  {
    "code": "invalid_type",
    "expected": "number",
    "received": "string",
    "path": [
      "pong"
    ],
    "message": "Expected number, received string"
  }
]",
    "segment": "body",
  },
}
`;
